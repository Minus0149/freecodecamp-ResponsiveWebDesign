** start of undefined **

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>JS DOCUMENTATION</title>
		<link rel="stylesheet" href="styles.css" />
	</head>
	<body>
		<main id="main-doc">
			<nav id="navbar">
				<header><h1>JS DOCUMENTATION</h1></header>
				<a href="#Introduction" class="nav-link">Introduction</a>
				<a href="#What_you_should_already_know" class="nav-link">
					What you should already know
				</a>
				<a href="#Hello_world" class="nav-link">Hello world</a>
				<a href="#Variables" class="nav-link">Variables</a>
				<a href="#Declaring_variables" class="nav-link">Declaring variables</a>
			</nav>
			<article class="main-article">
				<section class="main-section" id="Introduction">
					<header><h2>Introduction</h2></header>
					<article>
						<p>
							JavaScript is a cross-platform, object-oriented scripting
							language. It is a small and lightweight language. Inside a host
							environment (for example, a web browser), JavaScript can be
							connected to the objects of its environment to provide
							programmatic control over them.
						</p>
						<p>
							JavaScript contains a standard library of objects, such as Array,
							Date, and Math, and a core set of language elements such as
							operators, control structures, and statements. Core JavaScript can
							be extended for a variety of purposes by supplementing it with
							additional objects; for example:
						</p>
						<ul>
							<li>
								Client-side JavaScript extends the core language by supplying
								objects to control a browser and its Document Object Model
								(DOM). For example, client-side extensions allow an application
								to place elements on an HTML form and respond to user events
								such as mouse clicks, form input, and page navigation.
							</li>
							<li>
								Server-side JavaScript extends the core language by supplying
								objects relevant to running JavaScript on a server. For example,
								server-side extensions allow an application to communicate with
								a database, provide continuity of information from one
								invocation to another of the application, or perform file
								manipulations on a server.
							</li>
						</ul>
					</article>
				</section>
				<section class="main-section" id="What_you_should_already_know">
					<header><h2>What you should already know</h2></header>
					<article>
						<p>This guide assumes you have the following basic background:</p>
						<ul>
							<li>
								A general understanding of the Internet and the World Wide Web
								(WWW).
							</li>
							<li>
								Good working knowledge of HyperText Markup Language (HTML)
							</li>
							<li>
								Some programming experience. If you are new to programming, try
								one of the tutorials linked on the main page about JavaScript.
							</li>
						</ul>
					</article>
				</section>
				<section class="main-section" id="Hello_world">
					<header><h2>Hello world</h2></header>
					<article>
						<p>
							To get started with writing JavaScript, open the Scratchpad and
							write your first "Hello world" JavaScript code:
						</p>

						<code
							>function greetMe(yourName) { alert("Hello " + yourName); }
							greetMe("World");
						</code>

						<p>
							Select the code in the pad and hit Ctrl+R to watch it unfold in
							your browser!
						</p>
					</article>
				</section>
				<section class="main-section" id="Variables">
					<header><h2>Variables</h2></header>
					<article>
						<p>
							You use variables as symbolic names for values in your
							application. The names of variables, called identifiers, conform
							to certain rules.
						</p>
						<p>
							A JavaScript identifier must start with a letter, underscore (_),
							or dollar sign ($); subsequent characters can also be digits
							(0-9). Because JavaScript is case sensitive, letters include the
							characters "A" through "Z" (uppercase) and the characters "a"
							through "z" (lowercase).
						</p>
						<p>
							You can use ISO 8859-1 or Unicode letters such as å and ü in
							identifiers. You can also use the Unicode escape sequences as
							characters in identifiers. Some examples of legal names are
							Number_hits, temp99, and _name.
						</p>
					</article>
				</section>
				<section class="main-section" id="Declaring_variables">
					<header><h2>Declaring variables</h2></header>
					<article>
						<p>You can declare a variable in three ways:</p>
						<p>With the keyword var. For example,</p>
						<code>var x = 42</code>
						<p>
							This syntax can be used to declare both local and global
							variables.
						</p>
						<p>By simply assigning it a value. For example,</p>
						<code>x = 42.</code>
						<p>
							This always declares a global variable. It generates a strict
							JavaScript warning. You shouldn't use this variant.
						</p>
						<p>With the keyword let. For example,</p>
						<code>let y = 13.</code>
						<p>Or with the keyword const. For example,</p>
						<code>const y = 13.</code>
					</article>
				</section>
			</article>
		</main>
	</body>
</html>


** end of undefined **

** start of undefined **

* {
	padding: 0;
	margin: 0;
	box-sizing: border-box;
}

body {
	font: 16px "Open sans", Arial;
	background-color: #fffffa;
}

main {
	display: flex;
}

nav > header {
	border-bottom: 2px solid rgba(0, 22, 22, 0.4);
	padding: 25px 40px 25px 40px;
}

nav > a {
	border-bottom: 2px solid rgba(0, 22, 22, 0.4);
	padding: 15px 10px 15px 40px;
	color: #4d4e53;
	text-decoration: none;
}

#navbar {
	position: fixed;
	display: flex;
	flex-direction: column;
	width: 350px;
	height: 100%;
	border-right: 2px solid rgba(0, 22, 22, 0.4);
}

code {
	display: block;
	text-align: left;
	padding: 1rem 1rem 1rem 2rem;
	background-color: #f7f7f7;
}

.main-article {
	margin: 25px;
	margin-left: 375px;
	color: #4d4e53;
}

header {
	color: #000000;
}

section > article {
	margin: 15px;
}

section > article > p {
	margin: 15px 5px;
	line-height: 1.5;
}

section > article > ul {
	margin: 15px 35px;
	margin-top: -5px;
}

section > article > ul > li {
	padding-top: 10px;
	line-height: 1.5;
}

@media (max-width: 768px) {
	#navbar {
		width: 200px;
		font-size: 10px;
	}
	.main-article {
		margin-left: 225px;
	}
}


** end of undefined **

